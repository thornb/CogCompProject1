/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function () {
  'use strict';
  angular.module('app', [
    'gettext',
    'ngRoute',
    'templates',
    'ngAnimate',
    'dialog',
    'angularUUID2',
    'sprintf'
  ])
    .config(["$routeProvider", function ($routeProvider) {
      $routeProvider.otherwise({ 'redirectTo': '/' });
    }])
    .run(["$rootScope", "gettextCatalog", function ($rootScope, gettextCatalog) {
      gettextCatalog.debug = true;
    }]);
}());

angular.module("templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("modules/dialog-entries.html","<!----------------------------------------------------------------------------\n   Copyright IBM Corp. 2015\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n------------------------------------------------------------------------------>\n\n<!-- CONVERSATION SCREEN-->\n<section class=\"dialog-response dialog-response-type-{{dialogCtrl.responseType}}\">\n    <!-- content for about and how to -->\n    <script type=\"text/ng-template\" id=\"about.html\">\n        <p>\n            Watson Converation Service Simple ChatBox Example\n\n            <img src=“” height=“240px” width=“550px”>\n            This template is based off of the Watson Practitioner Assistant.The Practice team has been blogging the\n            progress of this project. Our hope is that the <a\n                href=\"https://apps.na.collabserv.com/blogs/5cf4b436-aa19-4945-b117-df68fcc81095?lang=en_us\"\n                target=\"_blank\"> blog entries </a> provide an open way to communicate the progress of the project and\n            encourage feedback from everyone. Please visit the <a\n                href=\"https://apps.na.collabserv.com/blogs/5cf4b436-aa19-4945-b117-df68fcc81095?lang=en_us\"\n                target=\"_blank\"> blog </a> to know more about the project progress and future plans.\n\n            <br></br>\n\n            If you are interested in the source code <a\n                href=\"https://github.ibm.com/watson-practice/Practitioner-Assistant\" target=\"_blank\"> fork it on\n            Github </a>\n        </p>\n    </script>\n\n    <script type=\"text/ng-template\" id=\"howto.html\">\n        <p>\n            <br></br>If you are having any trouble with this demo, you can contact <a\n                href=\"https://faces.tap.ibm.com/bluepages/profile.html?email=jocelyn.kong@ibm.com\"\n                target=\"_blank\"> Jocelyn Kong.</a>\n\n        </p>\n    </script>\n    <!-- App header, fixed position, fixed size -->\n    <header id=\"dialog-header\" class=\"dialog-header-{{dialogCtrl.state.class}} navbar navbar-fixed-top\">\n        <div class=\"dialog-header-inner\">\n            <div class=\"header-container\">\n                <div class=\"dialog-navbar-txt\">My Virtual Assistant</div>\n                <!-- HEADER -->\n                <!-- HOW TO -->\n                <!-- Trigger/Open The Modal -->\n                <!-- <div ng-click=\"dialogCtrl.howToClicked = !dialogCtrl.howToClicked\" class=\"navbar-howto\">How-To</div>\n\n                 &lt;!&ndash; The Modal &ndash;&gt;\n                 <div id=\"myModal\" ng-style=\"{ display: dialogCtrl.howToClicked == true ? \'block\' : \'none\' }\"\n                      class=\"modal\">\n                     &lt;!&ndash; Modal content &ndash;&gt;\n                     <div class=\"modal-content\">\n                         <div class=\"modal-header\">\n                             <div ng-click=\"dialogCtrl.howToClicked = dialogCtrl.closeVideo()\" class=\"close\">×</div>\n                             <h2>How To</h2>\n                         </div>\n                         <div class=\"modal-body\">\n                             <div ng-include src=\"\'howto.html\'\"></div>\n                         </div>\n                     </div>\n                 </div>\n\n                 &lt;!&ndash;ABOUT&ndash;&gt;\n                 &lt;!&ndash; Trigger/Open The Modal &ndash;&gt;\n                 <div ng-click=\"dialogCtrl.aboutClicked = !dialogCtrl.aboutClicked\" class=\"navbar-about\">About</div>\n\n                 &lt;!&ndash; The Modal &ndash;&gt;\n                 <div id=\"myModal\" ng-style=\"{ display: dialogCtrl.aboutClicked == true ? \'block\' : \'none\' }\"\n                      class=\"modal\">\n                     &lt;!&ndash; Modal content &ndash;&gt;\n                     <div class=\"modal-content\">\n                         <div class=\"modal-header\">\n\n                             <div ng-click=\"dialogCtrl.aboutClicked = !dialogCtrl.aboutClicked\" class=\"close\">×</div>\n                             <h2>About</h2>\n                         </div>\n                         <div class=\"modal-body\">\n                             <div ng-include src=\"\'about.html\'\"></div>\n                         </div>\n                     </div>\n                 </div>-->\n            </div>\n        </div>\n    </header>\n\n    <div id=\"dialog-cell\" class=\"dialog-conversation-cell\">\n        <div id=\"conversationParent\" class=\"dialog-entries col-xs-12\">\n\n            <!-- Actual conversation between user and system -->\n            <div ng-animate-children class=\"dialog-entry row\" ng-repeat=\"entry in dialogCtrl.conversation\">\n                <!--Display user entered text -->\n                <div ng-if=\"entry.input\" class=\"dialog-user-row\">\n                    <div class=\"dialog-segment-bkg\">\n                        <div class=\"dialog-row-text\" ng-bind-html=\"entry.input\"></div>\n                    </div>\n                </div>\n\n\n                <!--\n                Display watson response using directive. The directive takes care of adding\n                animation while the server is responding, and removing animation once response\n                is received\n                -->\n                <div ng-class=\"!entry.responses ? \'watson-thinking\' : \'no-class\'\">\n                    <div class=\"dialog-watson-row\" ng-if=\"entry != null && entry.responses != null\">\n                        <div class=\"dialog-segment-bkg\">\n                            <div class=\"dialog-row-text\" ng-bind-html=\"entry.responses\"></div>\n                        </div>\n                    </div>\n                </div>\n                <!-- If watson response is disco, return rest of answers in drop down list -->\n                <div ng-if=\"entry.discovery && entry.responses.length > 0\" class=\"drop-down\">\n                    <!-- If there is more than one disco response, will display button and rest of answers in a drop down list -->\n                    <div ng-if=\"entry.allResponses\" class=\"buttonRnR\" ng-click=\"entry.clicked = !entry.clicked\">\n                        <span ng-show=\"entry.clicked\">Collapse results - </span>\n                        <span ng-hide=\"entry.clicked\">Expand to see more answers +</span></div>\n                    <div class=\"RnR-answers\">\n                        <div ng-show=\"entry.clicked\">\n                            <div class=\"answer-container\" ng-repeat=\"entry in entry.allResponses track by $index \">\n                                <!-- Truncated text -->\n                                <div class=\"answers\" ng-class=\"{firstAnswer:$first}\" ng-bind-html=\"entry.lessAnswers\">\n                                    {{entry.lessAnswers}}\n                                </div>\n                                <!-- Trigger/Open The Modal -->\n                                <div ng-click=\"entry.modalClicked = !entry.modalClicked\" class=\"fullAnswerBtn\">View Full\n                                    Review\n                                </div>\n\n                                <!-- The Modal -->\n                                <div id=\"myModal\" ng-style=\"{ display: entry.modalClicked == true ? \'block\' : \'none\' }\"\n                                     class=\"modal\">\n                                    <!-- Modal content -->\n                                    <div class=\"modal-content\">\n                                        <div class=\"modal-header\">\n                                            <span ng-click=\"entry.modalClicked = !entry.modalClicked\"\n                                                  class=\"close\">×</span>\n                                            <h2 ng-bind-html=\"entry.summary\"></h2>\n                                        </div>\n                                        <div class=\"modal-body\">\n                                            <div class=\"modal-title\">\n                                              <table>\n                                                <tr>\n                                                  <td style=\"width: 80%\"><h3 ng-bind-html=\"entry.product_name\"></h3></td>\n                                                  <td><div ng-repeat=\"i in dialogCtrl.range(entry.rating) track by $index\" class=\"star\"></div></td>\n                                                </tr>\n                                                <tr class=\"small\">\n                                                  <td>{{entry.helpful}} found this review helpful.</td>\n                                                  <td style=\"text-align: right\">{{entry.review_date | date}}</td>\n                                                </tr>\n                                              </table>\n                                            </div>\n                                            <!-- Full disco answer -->\n                                            <p ng-bind-html=\"entry.review_text\"></p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n");
$templateCache.put("modules/dialog.html","<!----------------------------------------------------------------------------\n   Copyright IBM Corp. 2015\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n------------------------------------------------------------------------------>\n\n<section class=\"dialog-body-{{dialogCtrl.state.class}}\">\n\n    <!-- The area where the conversation is displayed. This is the scrollable div as opposed to the body-->\n    <div class=\"dialog-scrollable-div\" id=\"scrollable-div\" ng-if=\"dialogCtrl.state.key !== \'intro\'\" resize>\n        <div class=\"container dialog-container-{{dialogCtrl.state.class}}\">\n            <!--Include the conversation html if state is chatting. Conversation dom will be updated by additions\n                to the \'conversation\' array which is stored in the controller-->\n            <div class=\"dialog-center dialog-center-{{dialogCtrl.state.class}}\"\n                 ng-include=\"\'modules/dialog-entries.html\'\"></div>\n        </div>\n    </div>\n\n    <!--footer, user entry field -->\n    <footer class=\"footer-{{dialogCtrl.state.class}}\" id=\"dialog-footer\">\n        <div class=\"container\">\n            <form class=\"form\" role=\"form\" ng-submit=\"dialogCtrl.submit()\">\n                <div class=\"form-group has-controls dialog-form-group-{{dialogCtrl.state.class}}\">\n                    <div class=\"dialog-happy-text-{{dialogCtrl.state.class}}\">\n                        <div id=\"introContainer\">\n                            <div id=\"typing\"> Hi, I\'m the <br/><span> Watson Practitioner Assistant</span>.</div>\n                            <div id=\"typing\"> I can answer your questions</div>\n                            <div id=\"typing\"> about WEA and Watson Conversations</div>\n                        </div>\n                    </div>\n                    <table class=\"dialog-input-table\" ng-class=\"{fadein : dialogCtrl.state.key == \'intro\'}\">\n                        <tr>\n                            <td class=\"dialog-input-col\">\n                                <textarea id=\"question\" class=\"dialog-form-input form-control\"\n                                          type=\"text\"\n                                          placeholder=\"{{dialogCtrl.state.placeholder}}\"\n                                          ng-model=\"dialogCtrl.question\" autocorrect=\"off\"\n                                          autocomplete=\"off\" autofocus=\"autofocus\"\n                                ></textarea>\n                                <input id=\"submitbtn\" type=\"submit\"/>\n                            </td>\n                            <td class=\"dialog-resize-col\" id=\"resize-footer-col\">\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </form>\n        </div>\n    </footer>\n    <!-- Footer with Terms/Conditions and Privacy -->\n    <div ng-if=\"dialogCtrl.state.key == \'chatting\'\" class=\"dialog-links-parent-chatting\">\n        <div class=\"footer-container\">\n            <div class=\"links-container\">\n                <a class=\"dialog-link\" href=\"./tos/index.html\" target=\"_blank\">Terms &amp; Conditions</a>\n                |\n                <a style=\"padding-left:.5vw\" class=\"dialog-link\" href=\"http://www.ibm.com/privacy/us/en/\"\n                   target=\"_blank\">Privacy</a>\n            </div>\n            <img src=\"images/powered-by-watson.png\" style=\"float:right; width:143px;\"></img>\n\n        </div>\n    </div>\n    <!-- If user presses enter key, will submit input -->\n    <script>\n        window.onload = function () {\n            $(\'#question\').keypress(function (e) {\n                if (e.keyCode == 13 && !e.shiftKey) {\n                    e.preventDefault();\n                    document.getElementById(\'submitbtn\').click();\n                }\n            });\n        }\n    </script>\n</section>\n");}]);
/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog', [
        'templates',
        'dialog.constants',
        'dialog.service',
        'dialog.controller',
        'dialog.resize',
        'ngAnimate'
    ]);
}());

/**
 *
 * IBM Confidential
 * OCO Source Materials
 *
 * (C) Copyright IBM Corp. 2001, 2015
 *
 * The source code for this program is not published or otherwise
 * divested of its trade secrets, irrespective of what has been
 * deposited with the U.S. Copyright Office.
 *
 */
(function () {
    'use strict';

    angular.module('dialog.constants', [])

    /**
     * @name DialogConstants
     * @module dialog/constants
     * @description
     */
        .constant('dialogConstants', {
            messages: {
                genericWelcomeMsg: 'Nice to meet you. What can I do for you?',
                personalWelcomeMsg: 'Nice to meet you, %s. What can I do for you? Here are some questions I get asked frequently to get you started:',
                personalReturnWelcomeMsg: 'Good to see you again, %s! How can I help you today?'

            },
            errorMessages: {
                lowConfError: "I'm sorry, I didn't catch that. Could you please try rephrasing your question and include the offering you are inquiring about?",
                bluemixError: "Sorry, I'm having trouble connecting to Bluemix. Please come back later!",
                timeoutError: "Sorry, I wasn't able to find you an answer. Could you please rephrase your question and include the offering you are inquiring about?",
                serviceError: "Oh no, seems like we've hit a Service error! I will log this for troubleshooting. Please try rephrasing your questions.",

            },
            url: {
                //getWCSResponse: window.location.href.split('#')[0] + 'api/message' //'http://<your_app_name>.mybluemix.net/api/message' //"http://localhost:3000/api/message"
                getWCSResponse: "http://localhost:3000/api/message"
                //getWCSResponse: 'https://<your_app_name>.mybluemix.net/api/message'
            },
            ibmIdCookie: 'ibmid',
            usernameCookie: 'username',
            skipAuth: true,
            customGreeting: false

        });
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var newUser;
(function () {
    'use strict';

    angular.module('dialog.service', [])

      /**
       * @name dialogService
       * @module dialog/service
       * @description
       *
       * Implements the dialogService interface using the Orchestrator API
       */
      .service('dialogService', ["_", "$http", "$q", "$timeout", "$sce", "dialogConstants", function (_, $http, $q, $timeout, $sce, dialogConstants) {

            var conversation = [];

            /**
             * Gets all entries (responses) in the conversation so far.
             *
             * @public
             * @return {object[]} All entries in the conversation.
             */
            var getConversation = function () {
                return conversation;
            };

            /**
             * A shorthand for retrieving the latest entry in the conversation.
             * @public
             * @return {object} The latest entry in the conversation.
             */
            var getLatestResponse = function () {
                return conversation.length > 0 ? conversation[conversation.length - 1] : undefined;
            };


            /**
             * Retrieves value stored in cookie
             *
             * @return string Value stored in cookie.
             */
            function getCookie(cname) {
                var name = cname + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) == 0) {
                        return c.substring(name.length, c.length);
                    }
                }
                return "";
            }


            /**
             * Calls the Orchestrator API. Given a question/input from the
             * user a call is made to the API.
             *
             * @private
             * @return {object} A JSON object with the question, answer, source, and feedback status of a segment in the conversation.
             */

            var getResponse = function (question) {

                if (conversation.length > 1) {

                    var latestConversation = conversation.length > 0 ? conversation[conversation.length - 2] : undefined;
                    var context = latestConversation !== 'undefined' ? latestConversation.context : null;

                    var jsonDataResponse = {
                        input: {text: question},
                        alternate_intents: true,
                        context: context
                    };

                    return $http.post(dialogConstants.url.getWCSResponse, jsonDataResponse).then(function (res) {
                        return {
                            'input': res.data.input ? res.data.input.text : '',
                            'context': res.data.context,
                            'responses': res.data.output.text
                        };

                    }, function (error) {
                        console.log("ERROR");
                        console.log(error);
                        return {
                            'input': question,
                            'context': null,
                            'responses': null,
                            'source': 'ERROR'
                        };
                    });
                } else {
                    if (newUser == true && !dialogConstants.skipAuth) {
                        document.cookie = dialogConstants.usernameCookie + "=" + question;
                    }

                    if (dialogConstants.customGreeting) {
                        var deferred = $q.defer();
                        deferred.resolve({'responses': 'START_CONVERSATION', 'source': 'START_CONVERSATION'});

                        return deferred.promise;
                    } else {
                        var jsonDataResponse = {
                            input: {text: "start conversation"},
                            alternate_intents: true,
                            context: null
                        };

                        return $http.post(dialogConstants.url.getWCSResponse, jsonDataResponse).then(function (res) {
                            return {
                                'input': res.data.input ? res.data.input.text : '',
                                'context': res.data.context,
                                'responses': res.data.output.text && res.data.output.text.length > 0 ? res.data.output.text[0] : ''
                            };

                        }, function (error) {
                            console.log("ERROR");
                            console.log(error);
                            return {
                                'input': question,
                                'context': null,
                                'responses': null,
                                'source': 'ERROR'
                            };
                        });
                    }

                }
            };

            /**
             * @private
             * Returns a truncated String
             * @return string The truncated version of the text
             */
            function truncateText(text) {
                var shortenedString;
                var patt1 = /</g;
                var patt2 = />/g;
                var openHTMLTag;
                var closeHTMLTag;
                if (text.length <= 180) {
                    return text.substring(0, text.length);
                } else {

                    // checks for white spaces and closing tags so we don't return cut off words in truncated text
                    for (var i = 180; i > 0; i--) {
                        if (text.charAt(i) == " " || text.charAt(i - 1) == ">") {
                            shortenedString = text.substring(0, i);
                            break;
                        }
                    }
                    // checking for HTML tags so we don't break them
                    // if the number of open html tags don't match the number of closing html tags
                    // then we will find the closing html tags and get the substring that includes the closing
                    // html tags
                    openHTMLTag = shortenedString.match(patt1) != null? shortenedString.match(patt1).length : null;
                    closeHTMLTag = shortenedString.match(patt2) != null? shortenedString.match(patt2).length : null;
                    if (openHTMLTag !== closeHTMLTag) {
                        for (var i = shortenedString.length; i < text.length; i++) {
                            if (text.charAt(i) == ">") {
                                closeHTMLTag++;
                            }
                            if (openHTMLTag == closeHTMLTag) {
                                shortenedString = text.substring(0, i + 1);
                            }
                            break;
                        }
                    }

                    if (shortenedString.includes("<a")) {
                        // if substring includes opening link tag then find the index of the last occurrence of the
                        // opening tag
                        var openATag = shortenedString.lastIndexOf("<a");
                        // if there isn't a tag to close the link tag in substring then find
                        // the corresponding closing link tag by traversing from the opening link tag index to the end of the text
                        if (!shortenedString.includes("</a>")) {
                            var indexLinkCloseTag = text.substring(openATag, text.length).indexOf('</a>') + openATag;
                            return text.substring(0, (indexLinkCloseTag + 4));
                        } else {
                            // if there are both closing and opening link tags in substring already then return substring
                            return shortenedString;
                        }
                        // if substring doesn't contain link tags then just return the substring
                    } else {
                        return shortenedString;
                    }
                }
            }


            /**
             * Gets response and sets each segment of the
             * conversation array which is displayed in dialog-entries.html
             * @public
             * @return {object[]} An array of chat segments.
             */
            var query = function (input) {
                // push the user's question to the conversation
                conversation.push({
                    'input': conversation.length == 0 ? '' : input,
                    'context': null,
                    'discovery': false
                });

                return getResponse(input).then(function (lastRes) {
                    // if lastRes is discovery, then lastRes.responses will be an array otherwise it will be a string
                    var segment = conversation[conversation.length - 1];
                    if (lastRes && lastRes.source !== "ERROR") {
                        segment.context = lastRes.context;
                        //get last question/answer segment of conversation array
                        if (!lastRes.responses || lastRes.responses === "undefined" || (typeof lastRes.responses === "string" && lastRes.responses.trim().length === 0) || (typeof lastRes.responses === "string" && lastRes.responses === 'undefined<br>undefined')) {
                            // no response returned from api calls
                            segment.responses = dialogConstants.errorMessages.lowConfError;
                        } else {
                            // if returning user, display welcome back message instead of intro greeting message
                            if (conversation.length == 1 && dialogConstants.customGreeting) {
                                if (conversation.length == 1 && newUser === false && !dialogConstants.skipAuth) {
                                    segment.responses = sprintf(dialogConstants.messages.personalReturnWelcomeMsg, input);
                                } else if (conversation.length == 1 && newUser === true && dialogConstants.skipAuth) {
                                    // welcome greeting message
                                    segment.responses = sprintf(dialogConstants.messages.personalWelcomeMsg, input);
                                } else if (conversation.length == 1 && dialogConstants.skipAuth) {
                                    segment.responses = sprintf(dialogConstants.messages.genericWelcomeMsg, input);
                                }
                            }
                            else {
                                if(lastRes.responses instanceof Array) {
                                    if(lastRes.responses.length > 1){
                                        // discovery responses
                                        segment.discovery = true;
                                        // controls (false = collapsed /true: expanded) collapse/expand button of each disco watson response
                                        segment.clicked = true;
                                        // controls (false = close/true = open) each individual disco answer/modal within watson response
                                        segment.modalClicked = false;

                                        var firstAnswer = "Great question! I found a couple of results for you.";
                                        segment.responses = firstAnswer;
                                        // Place rest of answers in an array that will be displayed in drop down list
                                        if(lastRes.responses.length > 1){
                                            // lastRes.responses is an array of all the disco answers
                                            var allAnswers = [];
                                            for(var i = 0; i < lastRes.responses.length; i++){
                                                // take only first 180 characters of discovery response
                                                // using metadata because original source of data was database
                                                
                                                // Original source; compatible with Watson Discovery Datacrawler Documents (requires metadata field)                                                
                                                /*
                                                 * console.log(lastRes.responses[i].metadata.review_text);
                                                 * lastRes.responses[i].metadata.lessAnswers = truncateText(lastRes.responses[i].metadata.review_text) + "...";
                                                 * allAnswers.push(lastRes.responses[i].metadata);
                                                 */

                                                // Jury-rigged solution for Watson Discovery News
                                                // Mock up a version of the metadata object present in datacrawler output
                                                var text = lastRes.responses[i].text;
                                                console.log(text);
                                                
                                                var mockMetadata = { review_text : text,
                                                                     lessAnswers : truncateText(text) + "..." };

                                                allAnswers.push(mockMetadata); 

                            
                                            }

                                            segment.allResponses = allAnswers;

                                        }

                                    } else {
                                        segment.responses = typeof lastRes.responses[0] === "string"? lastRes.responses[0] : lastRes.responses[0].metadata.review_text ? lastRes.responses[0].metadata.review_text : "";
                                    }

                                } else {
                                    segment.responses = lastRes.responses;
                                }
                            }
                        }
                    } else {
                        segment.responses = dialogConstants.errorMessages.serviceError;
                    }
                    return conversation;
                }, function (error) {
                    // Watson response will be hardcoded error message if we don't receive response within 10 seconds or because system can't connect
                    if (error.statusText === 'error') {
                        conversation[index - 1].responses = dialogConstants.errorMessages.bluemixError;
                    } else if (error.statusText === 'timeout') {
                        conversation[index - 1].responses = dialogConstants.errorMessages.timeoutError;
                    }
                });

            };

            return {
                'getConversation': getConversation,
                'getLatestResponse': getLatestResponse,
                'query': query
            };
        }]
      );
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.resize', [])

    /**
     * @name resize
     * @module module/resize
     * @description
     *
     * Gets invoked to resize the scrollable div within the UI. Each time the page changes
     * size (via browser resize) this directive is invoked to resize the height of the inner
     * scrollable div.
     */
    .directive('resize', ["$timeout", function ($timeout) {
        return {
            'restrict': 'A',
            'link': function (scope, element) {
                var delayTimeout = null;
                var docHeight = null;
                var headerHeight = null;
                var footerHeight = null;
                var proposedHeight = 0;
                delayTimeout = $timeout(function () {
                    docHeight = $(window).height();
                    headerHeight = $('#dialog-header').outerHeight();
                    footerHeight = $('#dialog-footer').outerHeight();
                    proposedHeight = docHeight - (headerHeight + footerHeight + 5);
                    if (element.outerHeight(true) > proposedHeight) {
                        //Added for iOS issues when scrolling!
                        element.css('-webkit-overflow-scrolling', 'scroll');
                        element.height(proposedHeight);
                    }
                }, 250);

                $( window ).resize(function () {
                    if (delayTimeout) {
                        $timeout.cancel(delayTimeout);
                    }
                    delayTimeout = $timeout(function () {
                        docHeight = $(window).height();
                        headerHeight = $('#dialog-header').outerHeight();
                        footerHeight = $('#dialog-footer').outerHeight();
                        proposedHeight = docHeight - (headerHeight + footerHeight + 5);
                        if (element.outerHeight(true) > proposedHeight) {
                            element.css('-webkit-overflow-scrolling', 'touch');
                        }
                        else {
                            element.css('-webkit-overflow-scrolling', 'auto');
                        }
                        element.height(proposedHeight);
                    }, 250);
                });
            }
        };
    }]);
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    /**
     * @name DialogController
     * @module dialog/controller
     * @description
     *
     * Controls the state of the Practitioner Assistant view. At any given point of time, the Practitioner Assistant is in one of the following states:
     *
     * - initial  The "home" view displayed to the user when launching dialog
     * - chatting  The view displayed when user is typing a new response/question
     * - preview  The view is showing a movie preview
     * - favorites  When in small resolutions the favorites panel is displayed
     *
     */
    var DialogController = function (_, $rootScope, $scope, $location, $anchorScroll, $timeout, gettextCatalog, dialogService, dialogConstants) {
        var promptValidEmail = false;
        var aboutClicked = false;
        var howToClicked = false;
        var self = this;
        var placeholderText = null;
        var states = {
            'intro': {
                'key': 'intro',
                'class': 'intro',
                'placeholder': 'Your IBM email address (e.g. jdoe@us.ibm.com)',
                'introText': ''
            },
            'chatting': {
                'key': 'chatting',
                'class': 'chatting',
                'placeholder': 'Enter your question here...',
                'introText': ''
            },
            'preview': {
                'key': 'preview',
                'class': 'preview',
                'placeholder': 'Enter your response here...',
                'introText': ''
            }
        };

        var setState = function (state) {
            self.state = _.cloneDeep(state);
        };

        // closes the How To modal and stops the video
        self.closeVideo = function () {
            $('#howtovid')[0].pause();
            return false;
        };

        // submits input and retrieves response
        self.sendInput = function (input) {
            self.question = input;
            self.submit();
        };

        // used to be able to ng-repeat for set integer
        self.range = function(number) {
          var tbr = [];
          for(var i = 0; i < number; i++) {
            tbr.push(i);
          }
          return tbr;
        };

        // check if user is returning user
        function checkCookie() {
            var username = getCookie(dialogConstants.usernameCookie);
            var ibmid = getCookie(dialogConstants.ibmIdCookie);
            if ((username !== "" && ibmid !== "") || dialogConstants.skipAuth) {
                newUser = false;
            } else {
                newUser = true;

            }
        }

        checkCookie();

        // If first time user, will set state to intro and display intro welcome page
        // otherwise will skip to chatting page
        if (newUser === true) {
            setState(states.intro);
        } else {
            setState(states.chatting);
        }
        //gets the conversation array such that it can be tracked for additions
        self.conversation = dialogService.getConversation();
        self.question = null;

        if (!self.placeHolder) {
            $('#question').removeAttr('disabled');
            $('#question').focus();
        }


        /**
         * Submits the current question using dialogService
         */
        var valid = false;
        self.submit = function () {
            var child = null;
            var timeout = null;
            var footer = null;
            if (!self.question || self.question.length === 0) {
                $('#question').focus();
                return;
            }

            // If first time user entering name then retrieve
            // user info from faces API and save ibmid in cookies otherwise submit question
            if (self.conversation.length == 0 && newUser == true && valid == false) {
                document.cookie = dialogConstants.ibmIdCookie + "=" + self.question.toLowerCase();
                getUserInfo(self.question);
            } else {
                // shifts view to bottom of scrollable div
                $('#question').attr('disabled', '');
                timeout = $timeout(function () {
                    var scrollable = $('#scrollable-div');
                    if (scrollable[0]) {
                        scrollable[0].scrollTop = scrollable[0].scrollHeight;
                    }
                }, 500);

                console.log("Question ", self.question);
                dialogService.query(self.question).then(function (response) {
                    $('#question').removeAttr('disabled');
                    $('#question').val('');
                    $('#question').focus();
                    if ($.isArray(response)) {
                        response = response[response.length - 1];

                        //don't want to put focus into the field! (we don't want the keyboard popping up)
                        if ($(window).height() > 750) {
                            $('#question').focus();
                        }
                    }
                    // scroll to bottom of screen when new responses pops up
                    // NOTE: We must include scope.apply manually so that these changes propagate properly in the view
                    //$scope.$apply(function () {
                    if ($('#scrollable-div').prop('clientHeight') < $('#scrollable-div').prop('scrollHeight')) {
                        child = document.getElementById('resize-footer-col');
                        child.style.display = 'table-cell';
                        footer = document.getElementById('dialog-footer');
                        footer.style.overflowY = 'scroll';
                        if (timeout) {
                            $timeout.cancel(timeout);
                        }
                        timeout = $timeout(function () {
                            var scrollableDiv = $('#scrollable-div');
                            child.style.display = 'none';
                            if (scrollableDiv[0]) {
                                scrollableDiv[0].scrollTop = scrollableDiv[0].scrollHeight;
                            }
                        }, 500);
                    }
                    else {
                        child = document.getElementById('resize-footer-col');
                        if (child) {
                            child.style.display = 'table-cell';
                            footer = document.getElementById('dialog-footer');
                            footer.style.overflowY = 'hidden';
                            if (timeout) {
                                $timeout.cancel(timeout);
                            }
                            timeout = $timeout(function () {
                                var scrollableDiv = $('#scrollable-div');
                                child.style.display = 'none';
                                if (scrollableDiv[0]) {
                                    scrollableDiv[0].scrollTop = scrollableDiv[0].scrollHeight;
                                }
                            }, 500);
                        }

                    }
                    // });
                }, function (error) {
                    $scope.$apply(function () {
                        console.log(error);
                        $('#question').removeAttr('disabled');
                        $('#question').val('');
                        $('#question').focus();
                    });
                });
                delete self.question;
            }
        };

        function getCookie(cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }

        // if returning user, simulate submitting name to skip welcome screen
        if (newUser == false) {
            var username = dialogConstants.skipAuth? "guest" : getCookie(dialogConstants.usernameCookie);
            self.sendInput(username);
        }

        // uses Faces API to retrieve user info from given ibm id and submits user's first name
        function getUserInfo(ibmid) {
            console.log(ibmid, 'ibmid');
            var id = "email:" + ibmid;
            var jsonData = {q: id};
            return $.ajax({
                type: "GET",
                async: true,
                cache: false,
                url: 'http://faces.tap.ibm.com/api/find/?',
                dataType: 'json',
                data: jsonData
            }).done(function (res) {
                // if Faces API returns multiple results (multiple IBMers) in returned JSON data,
                // then search through array for user's own email and check/record it
                var presentInRes = false;
                var indexEmail;
                for (var i = 0; i < res.length; i++) {
                    if (self.question.toLowerCase() == res[i].email.toLowerCase()) {
                        presentInRes = true;
                        indexEmail = i;
                        break;
                    }
                }
                // if user puts in an ibm id and it doesn't match with email returned by Faces API
                // then will be alerted with error message
                if (!presentInRes) {
                    alert("Please enter a valid IBM ID!");
                    promptValidEmail = true;
                    $('#question').removeAttr('disabled');
                    $('#question').val('');
                    $('#question').focus();
                } else {
                    // if user input valid ibm id, will be asked to confirm otherwise user will input ibm id again
                    if (confirm("Just want to make sure you're " + res[indexEmail].name +
                            ". Please hit OK if that's your name so I can remember you next time we chat! Otherwise, press Cancel and input your IBM ID again.") == true) {
                        promptValidEmail = false;
                        valid = true;
                        var indexFirstName = 0;
                        while (((res[indexEmail].name).split(" "))[indexFirstName] == ' ') {

                            indexFirstName++;
                        }
                        self.sendInput(((res[indexEmail].name).split(" "))[indexFirstName]);
                    } else {
                        // user has to input ibm id again, enable the input field box again
                        promptValidEmail = true;
                        $('#question').removeAttr('disabled');
                        $('#question').val('');
                        $('#question').focus();

                    }
                }
            })
                .fail(function (xhr, status, error) {
                    console.log(xhr);
                    console.log(status);
                    console.log(error);
                    return {
                        'name': 'error'
                    };
                })
        }

        // switch to chatting screen
        self.switchToChatting = function () {
            console.log("Switch To Chatting fn");
            $location.path('chatting');
        };

        // event listener that listens for Watson response to return and finish loading, enables user input field box again
        // after loading has completed
        $scope.$on('$viewContentLoaded', function (next, current) {
            console.log("On content loaded");
            if (placeholderText) {
                $('#question').removeAttr('disabled');
                $('#question').focus();

            }
        });

        //Watch the conversation array.. If a segment is added then update the state
        $scope.$watch(function () {
            return self.conversation;
        }, function () {
            console.log("A new response fn");
            // We have a new response, switch to 'answered' state
            if (!_.isEmpty(self.conversation)) {
                if (self.conversation.length === 1) {
                    states.intro.introText = self.conversation[0].responses;
                    $('body').addClass('dialog-body-running');
                    console.log("state key", self.state.key);
                    if (self.state.key !== states.preview.key) {
                        setState(states.chatting);
                    }
                }
            }
        }, true);
    };
    DialogController.$inject = ["_", "$rootScope", "$scope", "$location", "$anchorScroll", "$timeout", "gettextCatalog", "dialogService", "dialogConstants"];

    angular.module('dialog.controller', ['gettext', 'lodash', 'ngRoute', 'ngSanitize', 'ngAnimate', 'dialog.service']).config(
        ["$routeProvider", function ($routeProvider) {
            $routeProvider.when('/', {
                'templateUrl': 'modules/dialog.html',
                'reloadOnSearch': false
            }).when('/chatting', {
                'templateUrl': 'modules/dialog.html',
                'reloadOnSearch': false
            });
        }]).controller('DialogController', DialogController);
}());
